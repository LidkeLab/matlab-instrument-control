function gui(obj, GUIParent)
%gui is the GUI method for the MIC_Triggerscope class.
% This GUI has several elements which can be used to control a Triggerscope
% (see MIC_Triggerscope.m for details).
%
% INPUTS:
%   GUIParent: The 'Parent' of this GUI, e.g., a figure handle.
%              (Default = figure(...))

% Created by:
%   David J. Schodt (Lidke lab, 2020)


% Create a figure handle for the GUI if needed.
if ~(exist('GUIParent', 'var') && ~isempty(GUIParent) ...
        && isgraphics(GUIParent))
    DefaultFigurePosition = get(0, 'defaultFigurePosition');
    GUIParent = figure('MenuBar', 'none', ...
        'Name', 'Triggerscope Control GUI', 'NumberTitle', 'off', ...
        'Units', 'pixels', ...
        'Position', DefaultFigurePosition);
end
obj.GUIParent = GUIParent;

% Generate some panels to help organize the GUI.
ConnectionPanel = uipanel(GUIParent, ...
    'Title', 'Connection', ...
    'Units', 'normalized', 'Position', [0, 0.1, 0.3, 0.9]);
ControlPanel = uipanel(GUIParent, ...
    'Title', 'Controls', ...
    'Units', 'normalized', 'Position', [0.3, 0.1, 0.7, 0.9]);
StatusPanel = uipanel(GUIParent, ...
    'Title', 'Status', ...
    'Units', 'normalized', 'Position', [0, 0, 1, 0.1]);

% Add controls to the ConnectionPanel.
UIControlInitPos = [0, 0.8, 0, 0];
ButtonSize = [0, 0, 1, 0.1];
TextSize = [0, 0, 0.5, 0.1];
DefaultSize = [0, 0, 0.5, 0.1];
SerialPortMessage = ...
    sprintf(['Serial port Triggerscope is connected to.\n', ...
    'This list always includes obj.SerialPort, even if not found.']);
uicontrol(ConnectionPanel, 'Style', 'text', 'String', 'Serial port: ', ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'Tooltip', SerialPortMessage, ...
    'Units', 'normalized', 'Position', UIControlInitPos + TextSize, ...
    'HorizontalAlignment', 'right');
SerialPortPopup = uicontrol(ConnectionPanel, ...
    'Style', 'popupmenu', ...
    'String', unique([obj.SerialPort, serialportlist()]), ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'Tooltip', SerialPortMessage, ...
    'Units', 'normalized', ...
    'Position', UIControlInitPos + DefaultSize + [TextSize(3), 0, 0, 0]);
ConnectTSButton = uicontrol(ConnectionPanel, ...
    'Style', 'pushbutton', 'String', 'Connect Triggerscope', ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'Units', 'normalized', ...
    'Position', UIControlInitPos + ButtonSize ...
    + [0, -SerialPortPopup.Position(4), 0, 0], ...
    'Enable', obj.convertLogicalToStatus(...
    obj.IsConnected, {'off', 'on'}), ...
    'Callback', @connectTriggerscopeCallback, 'Tag', 'ConnectTSButton');
DisconnectTSButton = uicontrol(ConnectionPanel, ...
    'Style', 'pushbutton', 'String', 'Disconnect Triggerscope', ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'Units', 'normalized', ...
    'Position', ConnectTSButton.Position ...
    + [0, -ConnectTSButton.Position(4), 0, 0], ...
    'Enable', obj.convertLogicalToStatus(...
    obj.IsConnected, {'on', 'off'}), ...
    'Callback', @disconnectTriggerscopeCallback, ...
    'Tag', 'DisconnectTSButton');

% Add a status display to the status panel.
uicontrol(StatusPanel, ...
    'Style', 'text', 'FontWeight', 'bold', ...
    'FontUnits', 'normalized', 'FontSize', 0.6, ...
    'String', obj.convertLogicalToStatus(...
    obj.IsConnected, {'Connected', 'Not connected'}), ...
    'BackgroundColor', obj.convertLogicalToStatus(...
    obj.IsConnected, {'green', 'red'}), ...
    'Units', 'normalized', 'Position', [0, 0.2, 0.15, 0.7], ...
    'Enable', 'off', 'Tag', 'ConnectionDisplay');
uicontrol(StatusPanel, ...
    'Style', 'text', 'String', 'Triggerscope activity: ', ...
    'FontUnits', 'normalized', 'FontSize', 0.55, ...
    'Units', 'normalized', 'Position', [0.2, 0, 0.2, 0.8], ...
    'HorizontalAlignment', 'right');
uicontrol(StatusPanel, ...
    'Style', 'edit', 'String', obj.ActivityMessage, ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'HorizontalAlignment', 'left', ...
    'Units', 'normalized', 'Position', [0.4, 0, 0.6, 1], ...
    'Enable', 'off', 'Tag', 'ActivityDisplay');

    function connectTriggerscopeCallback(~, ~)
        % This is a callback for the "Connect Triggerscope" button.
        obj.connectTriggerscope();
    end

    function disconnectTriggerscopeCallback(~, ~)
        % This is a callback for the "Disconnect Triggerscope" button.
        obj.disconnectTriggerscope();
    end














end