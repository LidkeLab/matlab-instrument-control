function gui(obj, GUIParent)
%gui is the GUI method for the MIC_Triggerscope class.
% This GUI has several elements which can be used to control a Triggerscope
% (see MIC_Triggerscope.m for details).
%
% INPUTS:
%   GUIParent: The 'Parent' of this GUI, e.g., a figure handle.
%              (Default = figure(...))

% Created by:
%   David J. Schodt (Lidke lab, 2020)


% Create a figure handle for the GUI if needed.
if ~(exist('GUIParent', 'var') && ~isempty(GUIParent) ...
        && isgraphics(GUIParent))
    DefaultFigurePosition = get(0, 'defaultFigurePosition');
    GUIParent = figure('MenuBar', 'none', ...
        'Name', 'Triggerscope Control GUI', 'NumberTitle', 'off', ...
        'Units', 'pixels', ...
        'Position', DefaultFigurePosition .* [0.5, 1, 1.3, 1]);
end
obj.GUIParent = GUIParent;

% Generate some panels to help organize the GUI.
StatusPanel = uipanel(GUIParent, 'Title', 'Status', ...
    'Units', 'normalized', 'Position', [0, 0, 1, 0.1]);
ConnectionPanel = uipanel(GUIParent, 'Title', 'Connection', ...
    'Units', 'normalized', 'Position', ...
    [0, 0.9, 1, 0.1]);
TTLDACPanel = uipanel(GUIParent, 'Title', 'TTL/DAC Control', ...
    'Units', 'normalized', 'Position', ...
    [0, StatusPanel.Position(4), ...
    1, 1 - StatusPanel.Position(4) - ConnectionPanel.Position(4)]);

% Add controls to the ConnectionPanel.
ButtonPos = [0, 0, 0.3, 1];
TextPos = [0, 0, 0.15, 1];
SerialPortMessage = ...
    sprintf(['Serial port Triggerscope is connected to.\n', ...
    'This list always includes obj.SerialPort, even if not found.']);
SerialPortTextPos = TextPos + [0, 1-TextPos(4), 0, 0];
uicontrol(ConnectionPanel, 'Style', 'text', ...
    'String', 'Serial port: ', ...
    'FontUnits', 'normalized', 'FontSize', 0.5, ...
    'Tooltip', SerialPortMessage, ...
    'Units', 'normalized', 'Position', SerialPortTextPos, ...
    'HorizontalAlignment', 'right');
PopupPosition = SerialPortTextPos + [SerialPortTextPos(3), 0, 0, 0];
uicontrol(ConnectionPanel, 'Style', 'popupmenu', ...
    'String', unique([obj.SerialPort, serialportlist()]), ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'Tooltip', SerialPortMessage, ...
    'Units', 'normalized', 'Position', PopupPosition);
ConnectButtonPos = PopupPosition.*[1, 1, 0, 0] ...
    + [PopupPosition(3), 0, 0, 0] ...
    + ButtonPos;
uicontrol(ConnectionPanel, 'Style', 'pushbutton', ...
    'String', obj.convertLogicalToStatus(obj.IsConnected, ...
    {'Disconnect Triggerscope', 'Connect Triggerscope'}), ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'Units', 'normalized', 'Position', ConnectButtonPos, ...
    'BackgroundColor', ...
    obj.convertLogicalToStatus(obj.IsConnected, {'green', 'red'}), ...
    'Callback', @toggleConnection, ...
    'Tag', 'ToggleConnectionButton');

% Add some controls to the TTLDACPanel.
NTTLDACPorts = 16;
NColumns = 4;
NRows = ceil(NTTLDACPorts / NColumns);
BlockSize = 1 ./ [NRows, NColumns];
UIControlInitPos = [0, 1, 0, 0];
ButtonPos = [0, 0, 0.65/NColumns, 0.3/NRows];
TextPos = [0, 0, 0.25/NColumns, 0.25/NRows];
EditPos = ButtonPos .* [1, 1, 0.25, 1];
PopupPos = ButtonPos .* [1, 1, 0.5, 1];
VRangeTextPos = UIControlInitPos ...
    + TextPos.*[1, 1, 2.8, 1] + [0, -TextPos(3), 0, 0];
for pp = 1:NTTLDACPorts
    % Determine which "row" and "column" of the panel the controls for this
    % TTL(DAC) should be.
    PanelRow = ceil(pp / NColumns);
    PanelColumn = pp - NColumns*(PanelRow-1);
    
    % Add a text uicontrol to specify which pushbutton belongs to which
    % TTL port.
    RowColumnOffset = XYExtent ...
        .* [(PanelColumn-1) * BlockSize(2), ...
        (1-PanelRow) * BlockSize(1)];
    TTLTextPosition = UIControlInitPos ...
        + [0, XYExtent(2) - UIControlInitPos(2), 0, 0] ...
        + [RowColumnOffset, 0, 0] ...
        + TextPos + [0, -TextPos(4), 0, 0];
    uicontrol(TTLDACPanel, 'Style', 'text', ...
        'FontUnits', 'normalized', 'FontSize', 0.6, ...
        'FontWeight', 'bold', ...
        'String', sprintf('TTL%i', pp), ...
        'Units', 'normalized', ...
        'Position', TTLTextPosition, 'HorizontalAlignment', 'left')
    
    % Add a pushbutton to drive the TTL HIGH or LOW.
    OnOffButtonPos = TTLTextPosition.*[1, 1, 0, 0] ...
        + [TTLTextPosition(3), 0, 0, 0] ...
        + ButtonPos;
    uicontrol(TTLDACPanel, 'Style', 'pushbutton', ...
        'FontUnits', 'normalized', 'FontSize', 0.5, ...
        'FontWeight', 'bold', 'String', 'LOW', ...
        'BackgroundColor', 'red', ...
        'Units', 'normalized', 'Position', OnOffButtonPos, ...
        'Callback', {@toggleTTL, pp})
    
    % Add a text uicontrol to specify which DAC control belongs to which
    % DAC port.
	DACTextPosition = TTLTextPosition.*[1, 1, 0, 0] ...
        + [0, -1.5*TTLTextPosition(4), 0, 0] ...
        + TextPos;
    uicontrol(TTLDACPanel, 'Style', 'text', ...
        'FontUnits', 'normalized', 'FontSize', 0.6, ...
        'FontWeight', 'bold', ...
        'String', sprintf('DAC%i', pp), ...
        'Units', 'normalized', ...
        'Position', DACTextPosition, 'HorizontalAlignment', 'left')
    
    % Add an edit box to set the output of the DAC port.
    DACEditPos = DACTextPosition.*[1, 1, 0, 0] ...
        + [DACTextPosition(3), 0, 0, 0] ...
        + EditPos;
    uicontrol(TTLDACPanel, 'Style', 'edit', ...
        'FontUnits', 'normalized', 'FontSize', 0.5, 'String', '0', ...
        'Units', 'normalized', 'Position', DACEditPos)
    
    % Add a text uicontrol to specify the units of the DAC output.
    VoltageTextPos = DACEditPos.*[1, 1, 0, 0] ...
        + [DACEditPos(3), 0, 0, 0] ...
        + TextPos.*[1, 1, 0.7, 1];
    uicontrol(TTLDACPanel, 'Style', 'text', ...
        'FontUnits', 'normalized', 'FontSize', 0.5, ...
        'FontWeight', 'bold', 'String', 'Volts', ...
        'HorizontalAlignment', 'left', ...
        'Units', 'normalized', 'Position', VoltageTextPos, ...
        'Callback', {@setDACOutput, pp});
    
    % Add a popup menu to select the voltage range of the DAC output.
    VoltageRangePopupPos = VoltageTextPos.*[1, 1, 0, 0] ...
        + [VoltageTextPos(3), 0, 0, 0] ...
        + PopupPos; 
    uicontrol(TTLDACPanel, 'Style', 'popupmenu', ...
        'String', obj.VoltageRangeOptions, ...
        'FontUnits', 'normalized', 'FontSize', 0.4, ...
        'Tooltip', SerialPortMessage, ...
        'Units', 'normalized', ...
        'Position', VoltageRangePopupPos, ...
        'Callback', @setVoltageRange);
end

% Add a status display to the status panel.
uicontrol(StatusPanel, 'Style', 'text', ...
    'FontWeight', 'bold', 'FontUnits', 'normalized', 'FontSize', 0.7, ...
    'String', obj.convertLogicalToStatus(...
    obj.IsConnected, {'Connected', 'Not connected'}), ...
    'BackgroundColor', obj.convertLogicalToStatus(...
    obj.IsConnected, {'green', 'red'}), ...
    'Units', 'normalized', 'Position', [0, 0.2, 0.15, 0.7], ...
    'Enable', 'off', 'Tag', 'ConnectionDisplay');
uicontrol(StatusPanel, 'Style', 'text', ...
    'String', 'Triggerscope activity: ', ...
    'FontUnits', 'normalized', 'FontSize', 0.55, ...
    'Units', 'normalized', 'Position', [0.18, 0, 0.2, 0.8], ...
    'HorizontalAlignment', 'right');
uicontrol(StatusPanel, 'Style', 'edit', ...
    'String', obj.ActivityMessage, ...
    'FontUnits', 'normalized', 'FontSize', 0.4, ...
    'HorizontalAlignment', 'left', ...
    'Units', 'normalized', 'Position', [0.38, 0, 0.62, 1], ...
    'Enable', 'off', 'Tag', 'ActivityDisplay');

    function toggleConnection(~, ~)
        % This is a callback for the "Connect Triggerscope" button.
        if obj.IsConnected
            obj.disconnectTriggerscope()
        else
            obj.connectTriggerscope
        end
    end

    function toggleTTL(Source, ~, TTLNumber)
        % This is a callback for the TTL on/off buttons.
        % This function will toggle the state of the TTL port defined by
        % TTLNumber.
        
        % Determine if the TTL is currently on or off (we'll assume the
        % current 'String' is correct).
        CurrentState = strcmpi(Source.String, 'HIGH');
        
        % Toggle the state of the TTL.
        obj.executeCommand(sprintf('TTL%i,%i', TTLNumber, ~CurrentState))
        
        % Update the 'String' and the 'BackgroundColor' of the pushbutton.
        Source.String = obj.convertLogicalToStatus(...
            CurrentState, {'LOW', 'HIGH'});
        Source.BackgroundColor = obj.convertLogicalToStatus(...
            CurrentState, {'red', 'green'});
        
    end

    function setDACOutput(Source, ~, DACNumber)
        % This is a callback for the DAC output edit box.
        % This function will take the number typed into Source.String and
        % attempt to set the output voltage of DAC port DACNumber to the
        % value specified.
        
        % Convert the input (given in volts) to the appropriate bit count
        % given the range.
        
        % Attempt to set the specified DAC output voltage.
    end

    function setVoltageRange(Source, ~)
        % This is a callback for the voltage range popup menu.
        % This function will attempt to set the voltage range setting of
        % DAC ports to the range given by the selected popup menu item.
    end


end