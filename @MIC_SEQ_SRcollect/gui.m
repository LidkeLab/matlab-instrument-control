function GuiFig = gui(obj)

% Ensure only one sequential microscope GUI is opened at a time.
h = findall(0, 'tag', 'SeqSRcollect.gui');
if ~(isempty(h))
    figure(h);
    return;
end

% Define reference parameters for the GUI dimensions.
BigPanelWidth = 400; % width of big uipanels
BigPanelHeight = 400; % height of big uipanels
MediumPanelWidth = floor(BigPanelWidth / 2);
MediumPanelHeight = floor(BigPanelHeight / 2);
SmallPanelHeight = floor(BigPanelHeight / 3);
ScreenSize = get(groot, 'ScreenSize'); % size of displaying screen
XSize = BigPanelWidth + MediumPanelWidth + 20; % width of figure
YSize = 2 * BigPanelHeight + SmallPanelHeight + 50; % height of figure
BottomLeftX = floor(ScreenSize(3)/2 - XSize/2); % ~centers figure on screen
BottomLeftY = floor(ScreenSize(4)/2 - YSize/2);
FirstRowStartPosition = [5, YSize-BigPanelHeight, 0, 0];
SecondRowStartPosition = [5, YSize-2*BigPanelHeight, ...
    0, 0]; % starting position of the 2nd row panels
ThirdRowStartPosition = [5, YSize-SmallPanelHeight-2*BigPanelHeight, ...
    0, 0]; % starting position of the 3rd row panels

% Create the GUI figure.
GuiFig = figure('Units', 'pixels', ...
    'Position', [BottomLeftX, BottomLeftY, XSize, YSize], ...
    'MenuBar', 'none', 'ToolBar', 'none', 'Visible', 'on', ...
    'NumberTitle', 'off', 'UserData', 0, 'Tag', 'SeqSRcollect.gui', ...
    'HandleVisibility', 'off', 'name', 'SeqAutoCollect.gui');
GuiFig.Color = get(0, 'defaultUicontrolBackgroundColor');
GuiFig.WindowScrollWheelFcn = @zPiezoControl; % mouse wheel for Z piezo
handles.output = GuiFig;
guidata(GuiFig, handles);
obj.GUIFigureMain = GuiFig; % pass the figure handle to the class instance

% Create a sample stage control panel and associated controls.
StageControlPanel = uipanel(GuiFig, 'Title', 'Sample Stage', ...
    'FontWeight', 'bold', 'Units', 'pixels', ...
    'Position', SecondRowStartPosition...
    + [0, 0, BigPanelWidth, BigPanelHeight]);
uicontrol('Parent', StageControlPanel, 'Style', 'Text', ...
    'String', '(use mouse wheel to control z piezo)', ...
    'HorizontalAlignment', 'left', ...
    'Position', [5, BigPanelHeight-35, 200, 20]);
handles.ButtonBigStepZPlus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '+Z', ...
    'Position', [10, BigPanelHeight-70, 40, 40], ...
    'FontSize', 12, 'FontWeight', 'bold', ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperLargeStep), ...
    'Callback', {@stepperControl, 33});
handles.ButtonSmallStepZPlus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '+z', ...
    'Position', [17, BigPanelHeight-96, 26, 26], ...
    'FontSize', 10, ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, 3});
handles.ButtonSmallStepZMinus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '-z', ...
    'Position', [17, BigPanelHeight-130, 26, 26], ...
    'FontSize', 10, ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, -3});
handles.ButtonBigStepZMinus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '-Z', ...
    'Position', [10, BigPanelHeight-170, 40, 40], ...
    'FontSize', 12, 'FontWeight', 'bold', ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperLargeStep), ...
    'Callback', {@stepperControl, -33});
handles.ButtonBigStepXPlus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '+X', ...
    'Position', [140, BigPanelHeight-70, 40, 40], ...
    'FontSize', 12, 'FontWeight', 'bold', ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperLargeStep), ...
    'Callback', {@stepperControl, 22});
handles.ButtonSmallXPlus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '+x', ...
    'Position', [147, BigPanelHeight-96, 26, 26], ...
    'FontSize', 10, ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, 2});
handles.ButtonSmallXMinus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '-x', ...
    'Position', [147, BigPanelHeight-130, 26, 26], ...
    'FontSize', 10, ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, -2});
handles.ButtonBigXMinus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '-X', ...
    'Position', [140, BigPanelHeight-170, 40, 40], ...
    'FontSize', 12, 'FontWeight', 'bold', ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperLargeStep), ...
    'Callback', {@stepperControl, -22});
handles.ButtonBigStepYMinus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '-Y', ...
    'Position', [79, BigPanelHeight-119, 40, 40], ...
    'FontSize', 12, 'FontWeight', 'bold', ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperLargeStep), ...
    'Callback', {@stepperControl, -11});
handles.ButtonSmallYMinus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '-y', ...
    'Position', [119, BigPanelHeight-112, 26, 26], ...
    'FontSize', 10, ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, -1});
handles.ButtonSmallYPlus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '+y', ...
    'Position', [175, BigPanelHeight-112, 26, 26], ...
    'FontSize', 10, ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, 1});
handles.ButtonBigYPlus = uicontrol('Parent', StageControlPanel, ...
    'Style', 'PushButton', 'String', '+Y', ...
    'Position', [201, BigPanelHeight-119, 40, 40], ...
    'FontSize', 12, 'FontWeight', 'bold', ...
    'TooltipString', sprintf('Step size %gmm', obj.StepperSmallStep), ...
    'Callback', {@stepperControl, 11});
uicontrol('Parent', StageControlPanel, 'Style', 'Text', ...
    'String', 'Stepper Position (mm)', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-45, 110, 15]);
handles.TextStepperX = uicontrol('Parent', StageControlPanel, ...
    'Style', 'Text', 'String', 'X: 1.000', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-60, 110, 15]);
handles.TextStepperY = uicontrol('Parent', StageControlPanel, ...
    'Style', 'Text', 'String', 'Y: 1.000', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-75, 110, 15]);
handles.TextStepperZ = uicontrol('Parent', StageControlPanel, ...
    'Style', 'Text', 'String', 'Z: 1.000', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-90, 110, 15]);
uicontrol('Parent', StageControlPanel, 'Style', 'Text', ...
    'String', 'Piezo Position (um)', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-130, 110, 15], ...
    'TooltipString', 'Control z piezo with mousewheel');
handles.TextPiezoX = uicontrol('Parent', StageControlPanel, ...
    'Style', 'Text', 'String', 'X: 10.000', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-145, 110, 15]);
handles.TextPiezoY = uicontrol('Parent', StageControlPanel, ...
    'Style', 'Text', 'String', 'Y: 10.000', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-160, 110, 15]);
handles.TextPiezoZ = uicontrol('Parent', StageControlPanel, ...
    'Style', 'Text', 'String', 'Z: 10.000', ...
    'Position', [BigPanelWidth-120, BigPanelHeight-175, 110, 15], ...
    'TooltipString', 'Control z piezo with mousewheel');
TopButtonPosition = ...
    [5, BigPanelHeight-225, 125, 25];
handles.ButtonLoadSample = uicontrol('Parent', StageControlPanel, ...
    'Style', 'pushbutton', 'String', 'Load Sample', ...
    'Position', TopButtonPosition, ...
    'Callback', @loadSample);
handles.ButtonUnloadSample = uicontrol('Parent', StageControlPanel, ...
    'Style', 'pushbutton', 'String', 'Unload Sample', ...
    'Position', TopButtonPosition + [0, -25, 0, 0], ...
    'Callback', @unloadSample);
handles.ButtonStepperGUI = uicontrol('Parent', StageControlPanel, ...
    'Style', 'pushbutton', 'String', 'Open Stepper GUI', ...
    'Position', TopButtonPosition + [125+5, 0, 0, 0], ...
    'Callback', @openStepperGUI);
handles.ButtonPiezoGUI = uicontrol('Parent', StageControlPanel, ...
    'Style', 'pushbutton', 'String', 'Open Piezo GUI', ...
    'Position', TopButtonPosition + [125+5, -25, 0, 0], ...
    'Callback', @openPiezoGUI);
handles.ButtonResetPiezos = uicontrol('Parent', StageControlPanel, ...
    'Style', 'pushbutton', 'String', 'Reset Piezos', ...
    'Position', TopButtonPosition + [2*(125+5), 0, 0, 0], ...
    'Callback', @resetPiezos);
handles.ButtonReconnectPiezos = uicontrol('Parent', StageControlPanel, ...
    'Style', 'pushbutton', 'String', 'Reconnect Piezos', ...
    'Position', TopButtonPosition + [2*(125+5), -25, 0, 0], ...
    'Callback', @reconnectPiezos);

% Create a control panel for the main sCMOS camera.
SCMOSControlPanel = uipanel(GuiFig, 'Title', 'Hamamatsu sCMOS', ...
    'FontWeight', 'bold', 'Units', 'pixels', ...
    'Position', FirstRowStartPosition ...
    + [BigPanelWidth+10, MediumPanelWidth, ...
    MediumPanelWidth, MediumPanelHeight]);
uicontrol('Parent', SCMOSControlPanel,'Style', 'Text', ...
    'String', 'Exposure Time (seconds)', ...
    'Position', [5, MediumPanelHeight-40, 200, 15], ...
    'HorizontalAlignment', 'left');
handles.TextExposureTimeLampFocus = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Text', ...
    'String', 'Lamp focus:', ...
    'Position', [25, MediumPanelHeight-55, 100, 15], ...
    'HorizontalAlignment', 'left');
handles.EditExposureTimeLampFocus = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-55, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'ExposureTimeLampFocus', 'Callback', @modifyClassProperty);
handles.TextExposureTimeLampCapture = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Text', ...
    'String', 'Lamp capture:', ...
    'Position', [25, MediumPanelHeight-70, 100, 15], ...
    'HorizontalAlignment', 'left');
handles.EditExposureTimeLampCapture = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-70, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'ExposureTimeCapture', 'Callback', @modifyClassProperty);
handles.TextExposureTimeLaserFocus = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Text', ...
    'String', 'Laser focus:', ...
    'Position', [25, MediumPanelHeight-85, 100, 15], ...
    'HorizontalAlignment', 'left');
handles.EditExposureTimeLaserFocus = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-85, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'ExposureTimeLaserFocus', 'Callback', @modifyClassProperty);
handles.TextExposureTimeLaserSequence = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Text', ...
    'String', 'Laser sequence:', ...
    'Position', [25, MediumPanelHeight-100, 100, 15], ...
    'HorizontalAlignment', 'left');
handles.EditExposureTimeLaserSequence = uicontrol(...
    'Parent', SCMOSControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-100, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'ExposureTimeSequence', 'Callback', @modifyClassProperty);
TopButtonPosition = ...
    [floor(MediumPanelWidth/2 - 125/2), MediumPanelHeight-145, 125, 25];
handles.ButtonFindCoverslip = uicontrol('Parent', SCMOSControlPanel, ...
    'Style', 'pushbutton', 'String', 'Find Coverslip', ...
    'Position', TopButtonPosition, ...
    'Callback', @findCoverslip);
handles.ButtonOpenSCMOSGUI = uicontrol('Parent', SCMOSControlPanel, ...
    'Style', 'pushbutton', 'String', 'Open sCMOS GUI', ...
    'Position', TopButtonPosition + [0, -25, 0, 0], ...
    'Callback', @openSCMOSGUI);
handles.ButtonResetSCMOS = uicontrol('Parent', SCMOSControlPanel, ...
    'Style', 'pushbutton', 'String', 'Reset sCMOS', ...
    'Position', TopButtonPosition + [0, -50, 0, 0], ...
    'Callback', @resetSCMOS);

% Create a control panel for the ROI selection tool and add the sub-ROI 
% selection buttons.
ROISelectionPanel = uipanel(GuiFig, 'Title', 'ROI Selection Tool', ...
    'FontWeight', 'bold', 'Units', 'pixels', ...
    'Position', FirstRowStartPosition ...
    + [0, 0, BigPanelWidth, BigPanelHeight]);
uicontrol('Parent', ROISelectionPanel, 'Style', 'Text', ...
    'String', '(hover mouse over a region to view # cells selected)', ...
    'HorizontalAlignment', 'left', ...
    'Position', [5, BigPanelHeight-35, 275, 20]);
handles.TextNumSelectedCells = uicontrol('Parent', ROISelectionPanel, ...
    'Style', 'Text', 'HorizontalAlignment', 'left', ...
    'String', '0 cell(s) selected from this coverslip', ...
    'Position', [5, 0, 275, 20]);
for ii = 1:10
    for jj = 1:10
        ButtonString = sprintf('%d,%d', ii, jj);
        uicontrol('Parent', ROISelectionPanel, 'Style', 'pushbutton', ...
            'String', ButtonString, 'BackgroundColor', [0, 1, 0], ...
            'Position', [5 + 35*(jj-1), 335 - 35*(ii-1), 35, 35], ...
            'TooltipString', ...
            sprintf('%i cell(s) selected in this subregion', 0), ...
            'Callback', @exposeGridPoint);
    end
end

% Create a control panel for laser controls.
LaserControlPanel = uipanel(GuiFig, 'Title', 'Lasers', ...
    'FontWeight', 'bold', 'Units', 'pixels', ...
    'Position', FirstRowStartPosition ...
    + [BigPanelWidth+10, 0, MediumPanelWidth, MediumPanelHeight]);
uicontrol('Parent', LaserControlPanel, 'Style', 'Text', ...
    'String', '647nm Laser', ...
    'Position', [5, MediumPanelHeight-40, 200, 15], ...
    'HorizontalAlignment', 'left');
uicontrol('Parent', LaserControlPanel, 'Style', 'Text', ...
    'String', 'Focus Power (mW):', ...
    'Position', [25, MediumPanelHeight-55, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.Edit647PowerFocus = uicontrol(...
    'Parent', LaserControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-55, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'LaserPowerFocus', 'Callback', @modifyClassProperty);
uicontrol('Parent', LaserControlPanel, 'Style', 'Text', ...
    'String', 'Sequence Power (mW):', ...
    'Position', [25, MediumPanelHeight-70, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.Edit647PowerSequence = uicontrol(...
    'Parent', LaserControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-70, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'LaserPowerSequence', 'Callback', @modifyClassProperty);
handles.ButtonOpen647LaserGUI = uicontrol(...
    'Parent', LaserControlPanel, ...
    'Style', 'pushbutton', 'String', 'Open 647nm Laser GUI', ...
    'Position', ...
    [floor(MediumPanelWidth/2-125/2), MediumPanelHeight-100, 125, 25], ...
    'Callback', @open647LaserGUI);
uicontrol('Parent', LaserControlPanel, 'Style', 'Text', ...
    'String', '405nm Laser', ...
    'Position', [5, MediumPanelHeight-135, 200, 15], ...
    'HorizontalAlignment', 'left');
uicontrol('Parent', LaserControlPanel, 'Style', 'Text', ...
    'String', 'Activation Power (mW):', ...
    'Position', [25, MediumPanelHeight-165, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.Edit405PowerActivate = uicontrol(...
    'Parent', LaserControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-165, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'LaserPower405Activate', 'Callback', @modifyClassProperty);
uicontrol('Parent', LaserControlPanel, 'Style', 'Text', ...
    'String', 'Bleaching Power (mW):', ...
    'Position', [25, MediumPanelHeight-150, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.Edit405PowerBleach = uicontrol(...
    'Parent', LaserControlPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-150, 35, 15], ...
    'HorizontalAlignment', 'left', ...
    'Tag', 'LaserPower405Bleach', 'Callback', @modifyClassProperty);
handles.ButtonOpen405LaserGUI = uicontrol(...
    'Parent', LaserControlPanel, ...
    'Style', 'pushbutton', 'String', 'Open 405nm Laser GUI', ...
    'Position', ...
    [floor(MediumPanelWidth/2-125/2), MediumPanelHeight-195, 125, 25], ...
    'Callback', @open405LaserGUI);

% Create a control panel for alignment/registration controls.
RegistrationControlPanel = uipanel(GuiFig, ...
    'Title', 'Alignment/Registration', 'FontWeight', 'bold', ...
    'Units', 'pixels', ...
    'Position', SecondRowStartPosition ...
    + [BigPanelWidth+10, MediumPanelHeight, ...
    MediumPanelWidth, MediumPanelHeight]);
uicontrol('Parent', RegistrationControlPanel, 'Style', 'text', ...
    'String', 'Use Active Registration', ...
    'Position', [25, MediumPanelHeight-40, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.CheckboxActiveReg = uicontrol(...
    'Parent', RegistrationControlPanel, 'Style', 'checkbox', ...
    'Position', [170, MediumPanelHeight-40, 15, 15], ...
    'Callback', @useActiveReg);
uicontrol('Parent', RegistrationControlPanel, 'Style', 'text', ...
    'String', 'Use Periodic Registration', ...
    'Position', [25, MediumPanelHeight-70, 125, 15]);
handles.CheckboxPeriodicReg = uicontrol(...
    'Parent', RegistrationControlPanel, 'Style', 'checkbox', ...
    'Position', [170, MediumPanelHeight-70, 15, 15], ...
    'Callback', @usePeriodicReg); 
handles.TextPeriodicReg = uicontrol('Parent', RegistrationControlPanel, ...
    'Style', 'text', 'String', 'after every         sequence(s)', ...
    'Position', [25, MediumPanelHeight-85, 150, 15]);
handles.EditboxPeriodicReg = uicontrol(...
    'Parent', RegistrationControlPanel, 'Style', 'edit', ...
    'String', obj.NSeqBeforePeriodicReg, ...
    'Position', [85, MediumPanelHeight-85, 20, 15], ...
    'Tag', 'NSeqBeforePeriodicReg', 'Callback', @modifyClassProperty);
TopButtonPosition = ...
    [floor(MediumPanelWidth/2 - 125/2), MediumPanelHeight-125, 125, 25];
handles.ButtonFindCoverslipOffset = uicontrol(...
    'Parent', RegistrationControlPanel, ...
    'Style', 'pushbutton', 'String', 'Find Coverslip Offset', ...
    'Position', TopButtonPosition, 'Callback', @findCoverslipOffset);

% Create a control panel for the directory/filename controls and add the
% needed controls.
FileSavePanel = uipanel(GuiFig, 'Title', 'Directory/File Options', ...
    'FontWeight', 'bold', 'Units', 'pixels', ...
    'Position', ThirdRowStartPosition ...
    + [0, 0, BigPanelWidth, SmallPanelHeight]);
uicontrol('Parent', FileSavePanel, 'Style', 'edit', ...
    'String', 'Save Directory:', 'Enable', 'off', ...
    'Position', [5, SmallPanelHeight-50, 85, 20]);
handles.EditSaveDirectory = uicontrol('Parent', FileSavePanel, ...
    'Style', 'edit', 'Position', [5+85, SmallPanelHeight-50, ...
    BigPanelWidth-95, 20], ...
    'Tag', 'TopDir', 'Callback', @modifyClassProperty);
uicontrol('Parent', FileSavePanel, 'Style', 'edit', ...
    'String', 'Coverslip Name:', 'Enable', 'off', ...
    'Position', [5, SmallPanelHeight-75, 85, 20]);
handles.EditCoverslipName = uicontrol('Parent', FileSavePanel, ...
    'Style', 'edit', 'Position', [5+85, SmallPanelHeight-75, ...
    BigPanelWidth-95, 20], ...
    'Tag', 'CoverslipName', 'Callback', @modifyClassProperty);
uicontrol('Parent', FileSavePanel, 'Style', 'edit', ...
    'String', 'Label Number:', 'Enable', 'off', ...
    'Position', [5, SmallPanelHeight-100, 85, 20]);
handles.EditLabelNumber = uicontrol('Parent', FileSavePanel, ...
    'Style', 'edit', 'Position', [5+85, SmallPanelHeight-100, 25, 20], ...
    'Tag', 'LabelIdx', 'Callback', @modifyClassProperty);
uicontrol('Parent', FileSavePanel, 'Style', 'text', ...
    'String', 'Indicate Photobleaching Round', ...
    'Position', [5+140, SmallPanelHeight-103, 150, 20], ...
    'TooltipString', 'Select to add _bleaching tag to the filename');
handles.CheckboxPhotobleach = uicontrol('Parent', FileSavePanel, ...
    'Style', 'checkbox', ...
    'Position', [5+290, SmallPanelHeight-103, 25, 25], ...
    'TooltipString', 'Select to add _bleaching tag to the filename');
uicontrol('Parent', FileSavePanel, 'Style', 'text', ...
    'String', 'Publish Results with PublishSeqSRResults', ...
    'HorizontalAlignment', 'left', 'Position', [5, 0, 205, 20]);
handles.CheckboxPublishResults = uicontrol('Parent', FileSavePanel, ...
    'Style', 'checkbox', 'Position', [5+205, 0, 25, 25], ...
    'Callback', @publishResults);

% Create a control panel for misc. acquisition parameter controls that
% don't fit well elsewhere/that should be close to the final workflow
% controls for ease of use.
CollectionPanel = uipanel(GuiFig, 'Title', 'Acquisition', ...
    'FontWeight', 'bold', 'Units', 'pixels', 'Tag', 'CollectionPanel', ...
    'Position', SecondRowStartPosition ...
    + [BigPanelWidth+10, 0, MediumPanelWidth, MediumPanelHeight]);
uicontrol('Parent', CollectionPanel, 'Style', 'text', ...
    'String', 'Number of Sequences:', ...
    'Position', [25, MediumPanelHeight-40, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.EditNumberOfSequences = uicontrol(...
    'Parent', CollectionPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-40, 35, 15], ...
    'HorizontalAlignment', 'left');
uicontrol('Parent', CollectionPanel, 'Style', 'text', ...
    'String', 'Number of Frames:', ...
    'Position', [25, MediumPanelHeight-55, 125, 15], ...
    'HorizontalAlignment', 'left');
handles.EditNumberOfFrames = uicontrol(...
    'Parent', CollectionPanel, 'Style', 'Edit', ...
    'Position', [150, MediumPanelHeight-55, 35, 15], ...
    'HorizontalAlignment', 'left');
uicontrol('Parent', CollectionPanel, 'Style', 'text', ...
    'String', 'Pre-Activate Fluorophores', ...
    'Position', [25, MediumPanelHeight-100, 150, 30], ...
    'HorizontalAlignment', 'left');
handles.CheckboxPreActivateFluorophores = uicontrol(...
    'Parent', CollectionPanel, 'Style', 'checkbox', ...
    'Position', [170, MediumPanelHeight-85, 15, 15], ...
    'Callback', @activateBeforeAcquisition);
handles.TextTimeToActivateFluorophores = uicontrol(...
    'Parent', CollectionPanel, 'Style', 'text', ...
    'String', 'for         second(s)', ...
    'Position', [25, MediumPanelHeight-115, 125, 30], ...
    'HorizontalAlignment', 'left');
handles.EditboxPreActivateFluorophores = uicontrol(...
    'Parent', CollectionPanel, 'Style', 'edit', ...
    'String', obj.DurationPreActivation, ...
    'Position', [45, MediumPanelHeight-100, 20, 15]);

% Add the final set of controls (i.e. those used once everything is set,
% such as Start Autocollect).
handles.ButtonFindAutocollect = uicontrol('Parent', GuiFig, ...
    'Style', 'pushbutton', 'String', 'Start Autocollect', ...
    'Position', ThirdRowStartPosition ...
    + [BigPanelWidth+10, SmallPanelHeight-30, 125, 25], ...
    'Callback', @autoCollect);
handles.ButtonAbortAcquisition = uicontrol('Parent', GuiFig, ...
    'Style', 'pushbutton', 'String', 'Abort Acquisition', ...
    'Position', ThirdRowStartPosition ...
    + [BigPanelWidth+10, SmallPanelHeight-55, 125, 25], ...
    'TooltipString', ...
    'Attempts to turn off lasers and stop the acquisition', ...
    'Callback', @abortAcquisition);

% Add a status indicator in which misc. info. can be displayed.
uicontrol('Parent', GuiFig, 'Style', 'text', ...
    'String', 'Status:', 'Position', [5, 5, 40, 20]);
handles.EditStatusIndicator = uicontrol('Parent', GuiFig, ...
    'Style', 'edit', 'Enable', 'off', 'Tag', 'StatusText', ...
    'Position', [45, 5, XSize-50, 25]);

% Set GUI parameter displays based on object properties.
properties2gui();

% Define the callback functions needed by the GUI controls/other GUI
% methods that we need.
    function gui2properties()
        % Set the object properties based on the GUI controls.
        
        % Misc. file saving properties.
        obj.TopDir = handles.EditSaveDirectory.String;
        obj.CoverslipName = handles.EditCoverslipName.String;
        obj.LabelIdx = str2double(handles.EditLabelNumber.String);
        
        % Alignment/registration properties.
        obj.NSeqBeforePeriodicReg = ...
            str2double(handles.EditboxPeriodicReg.String);
        
        % Misc. acquisition properties.
        obj.NumberOfSequences = ...
            str2double(handles.EditNumberOfSequences.String);
        obj.NumberOfFrames = str2double(handles.EditNumberOfFrames.String);
        obj.IsBleach = handles.CheckboxPhotobleach.Value;
        obj.DurationPreActivation = ...
            str2double(handles.EditboxPreActivateFluorophores.String);
        
        % sCMOS properties.
        obj.ExposureTimeLampFocus = ...
            str2double(handles.EditExposureTimeLampFocus.String);
        obj.ExposureTimeCapture = ...
            str2double(handles.EditExposureTimeLampCapture.String);
        obj.ExposureTimeLaserFocus = ...
            str2double(handles.EditExposureTimeLaserFocus.String);
        obj.ExposureTimeSequence = ...
            str2double(handles.EditExposureTimeLaserSequence.String);
        
        % Laser properties.
        obj.LaserPowerSequence = ...
            str2double(handles.Edit647PowerSequence.String);
        obj.LaserPowerFocus = ...
            str2double(handles.Edit647PowerFocus.String);
        obj.LaserPower405Activate = ...
            str2double(handles.Edit405PowerActivate.String);
        obj.LaserPower405Bleach = ...
            str2double(handles.Edit405PowerBleach.String);
    end

    function properties2gui()
        % Set the GUI controls/display based on object properties.
        
        % Misc. file saving displays.
        handles.EditSaveDirectory.String = obj.TopDir;
        handles.EditCoverslipName.String = obj.CoverslipName;
        handles.EditLabelNumber.String = obj.LabelIdx;

        % Update sample stage property displays.
        if ~isempty(obj.StageStepper)
            StepperPositionY = obj.StageStepper.getPosition(1);
            StepperPositionX = obj.StageStepper.getPosition(2);
            StepperPositionZ = obj.StageStepper.getPosition(3);
            handles.TextStepperY.String = ...
                sprintf('Y: %1.3f', StepperPositionY);
            handles.TextStepperX.String = ...
                sprintf('X: %1.3f', StepperPositionX);
            handles.TextStepperZ.String = ...
                sprintf('Z: %1.3f', StepperPositionZ);
        end
        if ~isempty(obj.StagePiezo)
            PiezoPositionY = obj.StagePiezo.StagePiezoY.getPosition();
            PiezoPositionX = obj.StagePiezo.StagePiezoX.getPosition();
            PiezoPositionZ = obj.StagePiezo.StagePiezoZ.getPosition();
            handles.TextPiezoY.String = ...
                sprintf('Y: %2.5f', PiezoPositionY);
            handles.TextPiezoX.String = ...
                sprintf('X: %2.5f', PiezoPositionX);
            handles.TextPiezoZ.String = ...
                sprintf('Z: %2.5f', PiezoPositionZ);
        end
        
        % Registration/alignment properties.
        handles.EditboxPeriodicReg.String = obj.NSeqBeforePeriodicReg;
        handles.CheckboxActiveReg.Value = obj.UseActiveReg;
        handles.CheckboxPeriodicReg.Value = obj.UsePeriodicReg;
        if handles.CheckboxPeriodicReg.Value
            % Ensure additional parameter selections are available.
            handles.TextPeriodicReg.Visible = 'on';
            handles.EditboxPeriodicReg.Visible = 'on';
        end
        
        % Main sCMOS camera properties.
        handles.EditExposureTimeLampFocus.String = ...
            obj.ExposureTimeLampFocus;
        handles.EditExposureTimeLampCapture.String = ...
            obj.ExposureTimeCapture;
        handles.EditExposureTimeLaserFocus.String = ...
            obj.ExposureTimeLaserFocus;
        handles.EditExposureTimeLaserSequence.String = ...
            obj.ExposureTimeSequence;
        
        % Laser properties.
        handles.Edit647PowerSequence.String = obj.LaserPowerSequence;
        handles.Edit647PowerFocus.String = obj.LaserPowerFocus;
        handles.Edit405PowerActivate.String = obj.LaserPower405Activate;
        handles.Edit405PowerBleach.String = obj.LaserPower405Bleach;
        
        % Display for total number of cells selected.
        handles.TextNumSelectedCells.String = sprintf(...
            '%i cell(s) selected from this coverslip', ...
            obj.CurrentCellIdx-1);
        
        % Misc. acquisition properties.
        handles.EditNumberOfSequences.String = obj.NumberOfSequences;
        handles.EditNumberOfFrames.String = obj.NumberOfFrames;
        handles.CheckboxPreActivateFluorophores.Value = ...
            obj.UsePreActivation;
        handles.EditboxPreActivateFluorophores.String = ...
            obj.DurationPreActivation;
        if handles.CheckboxPreActivateFluorophores.Value
            % Ensure additional parameter selections are available.
            handles.TextTimeToActivateFluorophores.Visible = 'on';
            handles.EditboxPreActivateFluorophores.Visible = 'on';
        end
    end

    function modifyClassProperty(Source, ~)
        % Callback for misc. ui fields which will modify/update the value
        % of a class property.    
        % NOTE: The 'Tag' property of Source should contain the name of the 
        %       class property being changed (that's how it should be set 
        %       in uicontrol(...) ).      
        
        % Change the class property to Source.String or
        % double(Source.String).
        if isfloat(obj.(Source.Tag))
            % Attempt to set the property to a float.
            obj.(Source.Tag) = str2double(Source.String);
        else
            % Assume the object property is a string or character array.
            obj.(Source.Tag) = Source.String;
        end
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function stepperControl(~, ~, MovementCode)
        % Callback for uicontrol of the sample stage stepper motors.
        % NOTE: Movement codes are 
        %       +-1 == small step in +-y, +-11 == big step in +-y
        %       +-2 == small step in +-x, +-22 == big step in +-x
        %       +-3 == small step in +-z, +-33 == big step in +-z
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Determine the stepper motor step size, including direction.
        % NOTE: the expression is boolean algebra, i.e. each step size is
        %       multiplied by a boolean (like a select bit) specifying the
        %       appropriate step size.
        StepSize = (obj.StepperLargeStep * (abs(MovementCode) > 10) ...
            + obj.StepperSmallStep * (abs(MovementCode) < 11)) ...
            * sign(MovementCode);
        
        % Determine the dimension along which to move.
        % E.g.: if movement code is 1, the channel is 1
        %       if movement code is 11, the channel is again 1
        StepperChannel = mod(abs(MovementCode), 10);
        
        % Send the command to the appropriate stepper motor.
        CurrentStepperPosition = ...
            obj.StageStepper.getPosition(StepperChannel);
        NewStepperPosition = CurrentStepperPosition + StepSize;
        obj.StageStepper.moveToPosition(StepperChannel, ...
            NewStepperPosition);
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function zPiezoControl(~, Event)
        % Callback for uicontrol of the sample stage piezo in the z
        % dimension.  This controlled by the mousewheel when the GUI figure
        % is the selected figure.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Move the z piezo based on the uicontrol Event.
        if Event.VerticalScrollCount>0 % Move Down
            obj.movePiezoDownSmall();
        else % Move up
            obj.movePiezoUpSmall();
        end
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function loadSample(~, ~)
        % Callback for the Load Sample button, which will move the sample
        % stage such that the sample is sufficiently close to the objective
        % to allow for finding the coverslip.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Load the sample.
        obj.loadSample;
        
        % Ensure the GUI reflects object properties.
        pause(3); % ensure the sample movement is complete.
        properties2gui();
    end

    function unloadSample(~, ~)
        % Callback for the Unload Sample button, which will move the sample
        % stage to a position appropriate for removing the sample holder.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Unload the sample.
        obj.unloadSample();
        
        % Ensure the GUI reflects object properties.
        pause(3); % ensure the sample movement is complete.
        properties2gui();
    end

    function openStepperGUI(~, ~)
        % Callback for the Open Stepper GUI button, which will open the GUI 
        % for the sample stage stepper motors.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Open the stepper motor GUI.
        obj.StageStepper.gui();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function openPiezoGUI(~, ~)
        % Callback for the Open Piezo GUIs button, which will open all
        % three GUIs for each of the three (x, y, z) sample stage piezos.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Open each of the piezo GUIs.
        obj.StagePiezo.gui();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function resetPiezos(~, ~)
        % Callback for the Reset Piezos button, which will attempt to close
        % and then re-open the connection to each individual piezo.
                
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Update the status indicator for the GUI.
        obj.StatusString = 'Resetting sample stage piezos...';
        
        % Ensure that the piezo objects exist and then proceed with the
        % reset.
        if ~isempty(obj.StagePiezo)
            obj.StagePiezo.StagePiezoX.resetDevices();
            obj.StagePiezo.StagePiezoY.resetDevices();
            obj.StagePiezo.StagePiezoZ.resetDevices();
        end
    
        % Update the status indicator for the GUI.
        obj.StatusString = '';
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function reconnectPiezos(~, ~)
        % Callback for the Reconnect Piezos button, which will attempt to
        % delete the piezo objects and then reconnect to each piezo.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Request user confirmation that they want to reconnect the piezos.
        UserConfirmation = questdlg(...
            sprintf(['Reconnecting piezos takes ~1min. \n', ...
            'Would you like to proceed?']), 'Warning', 'Yes', 'No', 'No');
        if strcmp(UserConfirmation, 'No')
            return
        end
        
        % If the piezo objects exist, delete them.
        if ~isempty(obj.StagePiezo)
            obj.StagePiezo.StagePiezoX.delete();
            obj.StagePiezo.StagePiezoY.delete();
            obj.StagePiezo.StagePiezoZ.delete();
        end
        
        % Attempt to reconnect to the piezos.
        obj.setupStagePiezo();        
        
        % Reset the AlignReg object to contain the new piezo handles.
        obj.setupAlignReg();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function findCoverslip(~, ~)
        % Callback for the Find Coverslip button, which illuminates the
        % sample and shows the camera view so that the user can move the
        % stage around and find the coverslip.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Call the appropriate method of obj. to begin the coverslip search
        % process.
        obj.findCoverslipFocus()
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function exposeGridPoint(Source, ~)
        % Callback for button click events on the ROI selection buttons.
        
        % Update object properties based on the GUI controls.
        gui2properties();
        
        % Determine how many cells have been selected prior to this button
        % click (to be used later).
        NumSelectedCells = obj.CurrentCellIdx;
        
        % Set the object property for the current grid index and then open
        % begin the cell selection workflow.
        CurrentGridIndex = sscanf(Source.String, '%d,%d');
        obj.CurrentGridIdx = CurrentGridIndex';
        obj.exposeGridPoint();
        
        % Add indicators to the GUI to show that this region has been
        % clicked and display relevant information about the selection.
        Source.BackgroundColor = [0, 1, 1]; % clicked box is now cyan
        if obj.CurrentCellIdx > NumSelectedCells
            % The user has selected a cell in the currently clicked
            % sub-region, update the tooltip string to reflect the
            % selection.
            NumCellsInCurrentROI = sscanf(Source.TooltipString, '%2i');
            Source.TooltipString = ...
                sprintf('%2i cell(s) selected in this subregion', ...
                NumCellsInCurrentROI + 1);
        end
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function open647LaserGUI(~, ~)
        % Callback for the Open 647nm Laser GUI button.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Open the 647nm laser GUI.
        obj.Laser647.gui();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function open405LaserGUI(~, ~)
        % Callback for the Open 405nm Laser GUI button.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Open the 405nm laser GUI.
        obj.Laser405.gui();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function findCoverslipOffset(~, ~)
        % Callback for the Find Coverslip Offset button, used to find the
        % offset of the coverslip once it's been re-mounted onto the sample
        % stage.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Call the appropriate object method to find the coverslip offset
        % manually.
        obj.findCoverSlipOffset_Manual();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function publishResults(Source, ~)
        % Callback for the checkbox which specifies whether or not
        % PublishSeqSRResults() will be called after the acquisition is
        % complete.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Set the PublishResults object property based on status of the
        % checkbox. 
        obj.PublishResults = Source.Value;
        
        % If the box is checked, request user selection of an sCMOS
        % calibration file, ensuring a file is actually selected to avoid
        % errors later on.  
        if Source.Value
            % Make sure PublishSeqSRResults actually exists in the users 
            % filepath so as to not cause errors later on.
            if isempty(which('PublishSeqSRResults'))
                % Warn the user about the missing file and change
                % properties as needed.
                warning('PublishSeqSRResults.m not found')
                Source.Value = 0;
                obj.PublishResults = 0;
                
                % Ensure the GUI reflects object properties (used here just 
                % to make sure GUI is updated as often as is feasible).
                properties2gui();
                return
            end
            
            % Request user selection of the calibration file.
            [File, Path] = uigetfile('Y:\sCMOS Calibrations\*.mat', ...
                'Select sCMOS Calibration File');
            if isequal(File, 0) || isequal(Path, 0)
                % User didn't select a file, uncheck the checkbox and
                % remove the PublishResults flag.
                Source.Value = 0;
                obj.PublishResults = 0;
            else
                % User did select a file, proceed to set object properties
                % as needed.
                obj.SCMOSCalFilePath = fullfile(Path, File);
            end
        end
                
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function autoCollect(~, ~)
        % Callback for the Start Autocollect button, which begins the
        % automated acquisiton process for all selected cells.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Ensure the AbortNow flag is no longer set.
        obj.AbortNow = 0;
        
        % Begin the automated collection process.
        obj.autoCollect()
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function openSCMOSGUI(~, ~)
        % Callback for the Open sCMOS GUI button, which opens the GUI for
        % the main sCMOS camera.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Open the cameras GUI.
        obj.CameraSCMOS.gui();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function resetSCMOS(~, ~)
        % Callback for the Reset sCMOS button.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Update the status indicator for the GUI.
        obj.StatusString = 'Resetting main sCMOS...';
        
        % Call the cameras reset method.
        obj.CameraSCMOS.reset();
        
        % Set some default exposure times.
        obj.ExposureTimeLampFocus = 0.02; % seconds
        obj.ExposureTimeCapture = 0.02; 
        obj.ExposureTimeLaserFocus = 0.2;
        obj.ExposureTimeSequence = 0.01;
        
        % Update the status indicator for the GUI.
        obj.StatusString = '';
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function abortAcquisition(~, ~)
        % Callback for the abort acquisition button, which attempts to turn
        % off the lasers, close the shutter, place ND filter in optical
        % path, and abort the acquisition on the camera.
        
        % Turn off the lasers.
        obj.Laser647.off();
        obj.Laser405.off();
        
        % Close the shutter and place ND filter in optical path.
        obj.Shutter.close();
        obj.FlipMount.FilterIn();
        
        % Call the cameras abort method.
        obj.CameraSCMOS.abort();
        
        % Set the AbortNow flag to hault further acquisition.
        obj.AbortNow = 1;
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function useActiveReg(Source, ~)
        % Callback which sets the UseActiveReg property of
        % MIC_SEQ_SRcollect to 1 when checked and 0 otherwise.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Set UseActiveReg to the desired value.
        obj.UseActiveReg = Source.Value;
        
        % If using active registration, ensure periodic registration is
        % turned off.
        if Source.Value
            obj.UsePeriodicReg = 0;
            handles.CheckboxPeriodicReg.Value = 0;
        end
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function usePeriodicReg(Source, ~)
        % Callback which sets the UsePeriodicReg property of
        % MIC_SEQ_SRcollect to 1 when checked and 0 otherwise.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Set UsePeriodicReg to the desired value.
        obj.UsePeriodicReg = Source.Value;
        
        % If using periodic registration, ensure active registration is
        % turned off.
        if Source.Value
            obj.UseActiveReg = 0;
            handles.CheckboxActiveReg.Value = 0;
        end
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end

    function activateBeforeAcquisition(Source, ~)
        % Callback which sets the UsePreActivation property of
        % MIC_SEQ_SRcollect to 1 when checked and 0 otherwise.
        
        % Ensure the object properties are set based on the GUI.
        gui2properties();
        
        % Set UsePreActivation to the desired value.
        obj.UsePreActivation = Source.Value;
        
        % Ensure the GUI reflects object properties.
        properties2gui();
    end
end